🚀 Raya Assessment – Verify Account Position (WI1)
📄 Project Overview

This project is an RPA solution developed in UiPath to automate the verification of account positions in the ACME System 1 application.

It follows the Robotic Enterprise Framework (REFramework) pattern, ensuring:

Robust error handling

Transactional processing via UiPath Orchestrator Queues

Modular workflows for scalability and reusability

The solution is divided into two main components:

Dispatcher: Extracts data from ACME System 1 and loads it into an Orchestrator Queue.

Performer: Processes items from the queue and executes the verification logic inside ACME System 1.

🔄 Execution Flow
Dispatcher

Initialize applications and configuration.

Extract Work Items from ACME System 1.

Add extracted data to the Orchestrator Queue.

Performer

Retrieve a transaction item from the queue.

Navigate through ACME System 1 to process the account verification.

Apply business rules, update status, and handle exceptions.

Log out and clean up applications.

🛠️ Prerequisites

Before running the automation, ensure the following are available:

UiPath Studio and UiPath Robot installed and connected.

UiPath Orchestrator Queue configured for this process.

Access credentials for ACME System 1.

Correctly populated configuration file at Data\Config.xlsx.

Orchestrator Assets for secure credential storage (e.g., ACME System credentials, email credentials).

⚙️ Key Workflows
Workflow	Purpose	Notes
Main.xaml	Orchestrates the process flow using a state machine	Includes Init, Get Transaction, Process, End states
InitAllSettings.xaml	Loads configuration and assets	Reads from Data\Config.xlsx
InitAllApplications.xaml	Initializes ACME System 1	Calls LoginToAcmeSystem1.xaml
GetTransactionData.xaml	Retrieves next queue item	Ends process if queue is empty
Process.xaml	Executes account verification logic	Navigates ACME, extracts data, applies business rules
SetTransactionStatus.xaml	Updates transaction outcome	Success, Business Exception, or System Exception
CloseAllApplications.xaml	Logs out and closes apps	Calls LogoutAcmeSystem1.xaml, CloseAcmeSystem1.xaml
RetryCurrentTransaction.xaml	Handles retries for failed items	Controlled via config retry settings
ApplicationCrashedEmail.xaml	Sends notification when crash is detected	Uses email template for AE01 (application crash)
📂 Project Structure
└── Raya-Assement-Verify-Account-Position-WI1-/
    ├── AcmeSystemIsntOpenBody.html
    ├── ApplicationCrashedEmail.html
    ├── RAYA-REF-Verify Account Position Dispatcher
    │   ├── .local
    │   ├── .objects
    │   ├── .project
    │   ├── .settings
    │   ├── .tmh
    │   ├── AcmeSystem1
    │   ├── Data
    │   ├── Documentation
    │   ├── Exceptions_Screenshots
    │   ├── Framework
    │   ├── LICENSE
    │   ├── Main.xaml
    │   ├── Main.xaml.json
    │   ├── README.md
    │   ├── Tests
    │   └── project.json
    ├── RAYA-REF-Verify Account Position Perfomer
    │   ├── .local
    │   ├── .objects
    │   ├── .project
    │   ├── .screenshots
    │   ├── .settings
    │   ├── .tmh
    │   ├── AcmeSystem1
    │   ├── AcmeSystem3
    │   ├── Data
    │   ├── Documentation
    │   ├── Exceptions_Screenshots
    │   ├── Framework
    │   ├── LICENSE
    │   ├── Main.xaml
    │   ├── Main.xaml.json
    │   ├── README.md
    │   ├── Tests
    │   └── project.json
    ├── Readme
    └── WrongCredaitialsEmailTemplate.html.html

📧 Email Templates

AcmeSystemIsntOpenBody.html → Triggered when ACME System 1 is not accessible.

ApplicationCrashedEmail.html → Triggered on application crash (AE01).

WrongCredaitialsEmailTemplate.html.html → Triggered when login credentials are invalid.

✅ Summary

This automation ensures seamless and reliable account position verification by:

Separating Dispatcher and Performer for scalability.

Leveraging REFramework for resilience.

Using UiPath Orchestrator for transaction management and monitoring.